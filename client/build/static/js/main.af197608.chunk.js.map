{"version":3,"sources":["components/LocationHeader.js","images/chevron-right-solid.svg","components/ScrollButton.js","components/HourDetails.js","components/HourBlock.js","components/HourForecast.js","components/DayForecast.js","components/LocationForecast.js","images/remove-button.svg","components/RemoveButton.js","components/Location.js","images/search-icon.svg","components/StatusInfo.js","components/SearchBar.js","js/utils.js","App.js","index.js"],"names":["LocationHeader","headerData","tempUnit","setTempUnit","className","name","src","icon","alt","id","temp","onClick","unitSwitch","document","getElementsByClassName","classList","toggle","setTimeout","weather","ScrollButton","props","buttonClass","imgClass","event","button","currentTarget","element","parentElement","childNodes","scrollLeft","chevron","HourDetails","hourDetails","description","feels_like","cloudiness","wind_speed","HourBlock","time","HourForecast","hourData","activeDayTab","activeDayData","filter","weekDay","lastExpanded","useRef","expandHourBlock","nextSibling","current","undefined","useEffect","hourly_data","map","obj","index","time_string","nanoid","DayTab","dayTab","style","handleOnChange","locationName","type","checked","dayName","value","onChange","htmlFor","maxTemp","DayForecast","dailyMax","setActiveTab","target","backgroundImage","maxTempIcon","LocationForecast","dayData","useState","RemoveButton","removeLocation","removeButton","Location","location","data","StatusInfo","text","SearchBar","locations","searchStatus","setSearchStatus","getWeather","placeholder","maxLength","onKeyUp","charCode","keyCode","click","input","userInput","trim","toLowerCase","length","includes","focus","searchIcon","toFahrenheit","tempC","Math","round","toCelcius","tempF","getHeaderData","weatherData","city","list","main","getHourData","dayNames","dailyData","forecast","forEach","item","clouds","all","wind","speed","date_string","dt_txt","split","slice","charAt","toUpperCase","currentHour","push","currentDay","Date","getDay","getDayData","hourlyBlock","App","setLocations","setForecast","lastUpdated","setLastUpdated","locationList","JSON","parse","localStorage","getItem","loadLocations","newForecast","day","hour","array","dataToCelcius","a","units","getTempUnits","fetch","response","json","apiData","getCurrentTime","cod","message","newLocations","saveToLocalStorage","items","setItem","stringify","toISOString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.af197608.chunk.js","sourcesContent":["const LocationHeader = ({ headerData, tempUnit, setTempUnit }) => {\r\n\r\n    const switchUnits = () => {\r\n        const unitSwitch = document.getElementsByClassName('temp-units')\r\n        for (let item of unitSwitch) {\r\n            item.classList.toggle('slideup')\r\n        }   \r\n        setTimeout(() => {\r\n            if (tempUnit === 'C') {\r\n                setTempUnit('F')\r\n            }\r\n            else {\r\n                setTempUnit('C')\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex fd-column p-relative location-header\">\r\n            <div className=\"d-flex f-wrap location-info\">\r\n                <h3>{headerData.name}</h3>\r\n                <div className=\"d-flex\">\r\n                    <div className=\"d-flex f-wrap icon-info\">\r\n                        <img className=\"icon\" src={headerData.icon} alt=\"icon\" />\r\n                        <h3 id=\"header-current-temp\">{headerData.temp}°</h3>\r\n                    </div>\r\n                    <div id=\"temp-units-switch\" className=\"d-flex fd-column overflow-y-hidden\" onClick={switchUnits}>\r\n                        <div className={tempUnit === 'F' ? \"d-flex fd-column temp-units slideup\" : \"d-flex fd-column temp-units\"}>\r\n                            <span>C</span>\r\n                            <span>F</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <p>{headerData.weather}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationHeader","export default __webpack_public_path__ + \"static/media/chevron-right-solid.93bc49d8.svg\";","import chevron from \"../images/chevron-right-solid.svg\"\r\n\r\nconst ScrollButton = (props) => {\r\n    const {buttonClass, imgClass} = props\r\n    \r\n    const handleOnClick = (event) => {\r\n        const button = event.currentTarget\r\n        const element = event.currentTarget.parentElement.childNodes[0]\r\n        if (button.className === \"scroll-button-right\") {\r\n            element.scrollLeft += 170;\r\n        }\r\n        if (button.className === \"scroll-button-left\") {\r\n            element.scrollLeft -= 170;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button className={buttonClass} onClick={handleOnClick}>\r\n            <img className={imgClass} src={chevron} alt=\"chevron\" />\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ScrollButton\r\n","const HourDetails = (props) => {\r\n    const { hourDetails, tempUnit } = props\r\n\r\n    return (\r\n        <div className=\"hour-details collapsed\">\r\n            <p className=\"font-weight-600\">{hourDetails.description}</p>\r\n            <p>Feels like <span>{hourDetails.feels_like}°{tempUnit}</span></p>\r\n            <p>Cloudiness <span>{hourDetails.cloudiness}%</span></p>\r\n            <p>Wind speed <span>{hourDetails.wind_speed} m/s</span></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HourDetails","import HourDetails from \"./HourDetails\"\r\n\r\nconst HourBlock = (props) => {\r\n    const { time, icon, temp, hourDetails, onClick, tempUnit } = props\r\n\r\n    return (\r\n        <div className=\"hourly-block-container\">\r\n            <div className=\"hourly-block\" onClick={onClick}>\r\n                <p>{time}</p>\r\n                <img className=\"icon\" src={icon} alt=\"icon\" />\r\n                <p className=\"hourly-temp\">{temp}°</p>\r\n            </div>\r\n            <HourDetails\r\n                hourDetails={hourDetails}\r\n                tempUnit={tempUnit}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HourBlock","import { useEffect, useRef } from \"react\"\r\nimport ScrollButton from \"./ScrollButton\"\r\nimport HourBlock from \"./HourBlock\"\r\nimport { nanoid } from 'nanoid'\r\n\r\nconst HourForecast = (props) => {\r\n    const { hourData, activeDayTab, tempUnit } = props\r\n    const activeDayData = hourData.filter((element) => element.weekDay === activeDayTab)[0]\r\n\r\n    let lastExpanded = useRef()\r\n\r\n    const expandHourBlock = (event) => {\r\n        const element = event.currentTarget.nextSibling\r\n        if (lastExpanded.current === null || lastExpanded.current === undefined) {\r\n            lastExpanded.current = element\r\n            lastExpanded.current.classList.toggle('collapsed')\r\n        }\r\n        else if (lastExpanded.current === element) {\r\n            lastExpanded.current.classList.toggle('collapsed')\r\n            lastExpanded.current = null\r\n        }\r\n        else {\r\n            lastExpanded.current.classList.toggle('collapsed')\r\n            lastExpanded.current = element\r\n            lastExpanded.current.classList.toggle('collapsed')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (lastExpanded.current) {\r\n            lastExpanded.current.classList.toggle('collapsed')\r\n            lastExpanded.current = null\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"d-flex p-relative\">\r\n            <div className=\"hourly-forecast\">\r\n                {\r\n                    activeDayData.hourly_data.map((obj, index) => {\r\n                        return (\r\n                            <HourBlock\r\n                                key={nanoid(3)}\r\n                                time={obj.time_string}\r\n                                icon={obj.icon}\r\n                                temp={obj.temp}\r\n                                tempUnit={tempUnit}\r\n                                hourDetails={obj}\r\n                                onClick={expandHourBlock}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <ScrollButton buttonClass=\"scroll-button-left\" imgClass=\"chevron-left\" />\r\n            <ScrollButton buttonClass=\"scroll-button-right\" imgClass=\"chevron-right\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HourForecast","const DayTab = ({ dayTab, activeDayTab, style, handleOnChange, index, locationName }) => {\r\n    // const uniqueStr = nanoid(2)\r\n    const id = 'tab' + index + '_' + locationName\r\n\r\n    return (\r\n        <div className=\"day-block\">\r\n            <input\r\n                type=\"radio\"\r\n                id={id}\r\n                checked={activeDayTab === dayTab.dayName}\r\n                value={dayTab.dayName}\r\n                onChange={handleOnChange}\r\n            />\r\n            <label\r\n                htmlFor={id}\r\n                className=\"label-radio\">\r\n                <p className=\"week-day\">{dayTab.dayName}</p>\r\n                <p>{dayTab.maxTemp}°</p>\r\n            </label>\r\n            <label\r\n                htmlFor={id}\r\n                className=\"daytab-image\"\r\n                style={style}>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DayForecast = (props) => {\r\n    const { dailyMax, activeDayTab, setActiveTab, locationName } = props\r\n\r\n    const handleOnChange = (event) => {\r\n        setActiveTab(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"daily-forecast\">\r\n            {\r\n                dailyMax.map((dayTab, index) => {\r\n                    const style = {\r\n                        backgroundImage: `url(${dayTab.maxTempIcon})`\r\n                    }\r\n                    return (\r\n                        <DayTab\r\n                            dayTab={dayTab}\r\n                            activeDayTab={activeDayTab}\r\n                            handleOnChange={handleOnChange}\r\n                            style={style}\r\n                            key={index}\r\n                            index={index}\r\n                            locationName={locationName}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayForecast","import { useState } from \"react\";\r\nimport HourForecast from './HourForecast'\r\nimport DayForecast from './DayForecast'\r\n\r\nconst LocationForecast = (props) => {\r\n    const { hourData, dayData, locationName, tempUnit } = props\r\n\r\n    const [activeDayTab, setActiveTab] = useState(dayData[0].dayName)\r\n\r\n    return (\r\n        <div>\r\n            <HourForecast\r\n                hourData={hourData}\r\n                activeDayTab={activeDayTab}\r\n                tempUnit={tempUnit}\r\n            />\r\n            <DayForecast\r\n                dailyMax={dayData}\r\n                activeDayTab={activeDayTab}\r\n                setActiveTab={setActiveTab}\r\n                locationName={locationName}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationForecast","export default __webpack_public_path__ + \"static/media/remove-button.8e71fc2e.svg\";","import removeButton from \"../images/remove-button.svg\"\r\n\r\nconst RemoveButton = ({ removeLocation }) => {\r\n    return (\r\n        <button className=\"remove-button\" onClick={removeLocation}>\r\n            <img\r\n                className=\"remove-icon\"\r\n                src={removeButton}\r\n                alt=\"remove icon\"\r\n            />\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default RemoveButton","import LocationHeader from './LocationHeader'\r\nimport LocationForecast from './LocationForecast'\r\nimport RemoveButton from \"./RemoveButton\";\r\n\r\nconst Location = ({ location, data, tempUnit, removeLocation, setTempUnit }) => {\r\n\r\n    return (\r\n        <div className=\"d-flex-center fd-column p-relative width-100pct\">\r\n            <RemoveButton\r\n                removeLocation={() => removeLocation(location)}\r\n            />\r\n            <div className=\"location\">\r\n                <LocationHeader\r\n                    headerData={data.headerData}\r\n                    tempUnit={tempUnit}\r\n                    setTempUnit={setTempUnit}\r\n                />\r\n                <LocationForecast\r\n                    hourData={data.hourData}\r\n                    dayData={data.dayData}\r\n                    locationName={location}\r\n                    tempUnit={tempUnit}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location","export default __webpack_public_path__ + \"static/media/search-icon.8b597373.svg\";","const StatusInfo = ({ text }) => {\r\n    return <p id=\"status-info-paragraph\">{text}</p>\r\n}\r\n\r\nexport default StatusInfo","// import { useState, useEffect } from \"react\";\r\nimport searchIcon from \"../images/search-icon.svg\"\r\nimport StatusInfo from \"./StatusInfo\";\r\n\r\nconst SearchBar = ({ locations, searchStatus, setSearchStatus, getWeather }) => {\r\n\r\n    const search = () => {\r\n        const input = document.getElementsByClassName('search-input')[0]\r\n        const userInput = input.value.trim().toLowerCase()\r\n        if (userInput.length < 3) {\r\n            setSearchStatus('Please enter a valid location name')\r\n        }\r\n        else {\r\n            if (locations.includes(userInput)) {\r\n                setSearchStatus('Location already exists')\r\n            }\r\n            else {\r\n                if (locations.length >= 3) {\r\n                    setSearchStatus('Sorry, the app supports up to 3 locations only')\r\n                }\r\n                else {\r\n                    setSearchStatus(`Loading weather data for ${userInput}`)\r\n                    getWeather(userInput)\r\n                    input.value = ''\r\n                    input.focus()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onKeyUp = (event) => {\r\n        if (event.charCode === 13 || event.keyCode === 13) {\r\n            document.getElementsByClassName('search-button')[0].click()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex-center fd-column\">\r\n            <div className=\"search-bar d-flex\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter a location here\"\r\n                    className=\"search-input\"\r\n                    maxLength=\"40\"\r\n                    onKeyUp={(event) => onKeyUp(event)}\r\n                >\r\n                </input>\r\n                <button\r\n                    className=\"search-button\"\r\n                    onClick={search}\r\n                >\r\n                    <img\r\n                        className=\"search-icon\"\r\n                        src={searchIcon}\r\n                        alt=\"search icon\"\r\n                    />\r\n                </button>\r\n            </div>\r\n            <StatusInfo text={searchStatus} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","export const toFahrenheit = function (tempC) {\r\n    return Math.round((tempC * 9 / 5) + 32)\r\n}\r\n\r\nexport const toCelcius = function (tempF) {\r\n    return Math.round((tempF - 32) * 5 / 9)\r\n}\r\n\r\nexport const getHeaderData = function (weatherData) {\r\n    return {\r\n        name: weatherData.city.name,\r\n        icon: '/images/' + weatherData.list[0].weather[0].icon + '@2x.png',\r\n        temp: Math.round(weatherData.list[0].main.temp),\r\n        weather: weatherData.list[0].weather[0].main\r\n    }\r\n}\r\n\r\nexport const getHourData = function (weatherData) {\r\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n    let dayName = ''\r\n    let hourData = {}\r\n    let dailyData = []\r\n    let forecast = []\r\n    weatherData.list.forEach((item, index) => {\r\n        hourData = {\r\n            temp: Math.round(item.main.temp),\r\n            feels_like: Math.round(item.main.feels_like),\r\n            description: item.weather[0].description,\r\n            icon: '/images/' + item.weather[0].icon + '@2x.png',\r\n            cloudiness: item.clouds.all,\r\n            wind_speed: item.wind.speed,\r\n            date_string: item.dt_txt.split(' ')[0],\r\n            time_string: item.dt_txt.split(' ')[1].slice(0, 5)\r\n        }\r\n        hourData.description = hourData.description.charAt(0).toUpperCase() + hourData.description.slice(1)\r\n        let currentHour = item.dt_txt.split(' ')\r\n        if (currentHour[1] !== '06:00:00') {\r\n            dailyData.push(hourData)\r\n        }\r\n        else if (currentHour[1] === '06:00:00') {\r\n            let currentDate = new Date(currentHour[0])\r\n            let currentDay = currentDate.getDay()\r\n            if (currentDay - 1 < 0) {\r\n                dayName = dayNames[dayNames.length - 1]\r\n            }\r\n            else {\r\n                dayName = dayNames[currentDay - 1]\r\n            }\r\n            if (dailyData.length > 0) {\r\n                forecast.push({\r\n                    weekDay: dayName,\r\n                    hourly_data: dailyData\r\n                })\r\n                dailyData = []\r\n            }\r\n            dailyData.push(hourData)\r\n        }\r\n    })\r\n    return forecast\r\n}\r\n\r\nexport const getDayData = function (forecast) {\r\n    let dayData = []\r\n    forecast.forEach((obj) => {\r\n        let maxTemp = 0\r\n        let maxTempIcon = ''\r\n        let dayName = obj.weekDay\r\n        obj.hourly_data.forEach((hourlyBlock) => {\r\n            let temp = hourlyBlock.temp\r\n            if (temp > maxTemp) {\r\n                maxTemp = temp\r\n                maxTempIcon = hourlyBlock.icon\r\n            }\r\n        })\r\n        dayData.push({\r\n            dayName: dayName,\r\n            maxTemp: maxTemp,\r\n            maxTempIcon: maxTempIcon\r\n        })\r\n    })\r\n    return dayData\r\n}\r\n\r\nexport const fetchApiData = async () => {\r\n    // const WS_URL = 'http://localhost:3000/api/search?q='\r\n    // const WS_URL = 'https://weatherstack-app.herokuapp.com/api/search?q='\r\n\r\n    const url = 'data.json'\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    // console.log(data)\r\n    return data\r\n}\r\n\r\nexport const dataToFahrenheit = (array) => {\r\n    const newData = array.map((obj) => {\r\n        obj.headerData.temp = toFahrenheit(obj.headerData.temp)\r\n        obj.hourData.forEach((day) => {\r\n            day.hourly_data.forEach((hour) => {\r\n                hour.temp = toFahrenheit(hour.temp)\r\n                hour.feels_like = toFahrenheit(hour.feels_like)\r\n            })\r\n        })\r\n        obj.dayData.forEach((day) => {\r\n            day.maxTemp = toFahrenheit(day.maxTemp)\r\n        })\r\n        return obj\r\n    })\r\n    return newData\r\n}\r\n\r\nexport const dataToCelcius = (array) => {\r\n    const newData = array.map((obj) => {\r\n        obj.headerData.temp = toCelcius(obj.headerData.temp)\r\n        obj.hourData.forEach((day) => {\r\n            day.hourly_data.forEach((hour) => {\r\n                hour.temp = toCelcius(hour.temp)\r\n                hour.feels_like = toCelcius(hour.feels_like)\r\n            })\r\n        })\r\n        obj.dayData.forEach((day) => {\r\n            day.maxTemp = toCelcius(day.maxTemp)\r\n        })\r\n        return obj\r\n    })\r\n    return newData\r\n}\r\n\r\nconst toMilesPerHour = function () {\r\n    let speed = window.event.target;\r\n    let len = speed.innerHTML.length\r\n    let speedKMH = Number(speed.innerHTML.substring(0, len - 4))\r\n    let speedMPH = (speedKMH / 1.609).toFixed(0)\r\n    speed.innerHTML = speedMPH + ' mph'\r\n    speed.onclick = toKilometersPerHour\r\n}\r\n\r\nconst toKilometersPerHour = function () {\r\n    let speed = window.event.target;\r\n    let len = speed.innerHTML.length\r\n    let speedMPH = Number(speed.innerHTML.substring(0, len - 4))\r\n    let speedKMH = (speedMPH * 1.609).toFixed(0)\r\n    speed.innerHTML = speedKMH + ' kmh'\r\n    speed.onclick = toMilesPerHour\r\n}","import { useState, useEffect } from 'react'\r\nimport Location from './components/Location'\r\nimport SearchBar from './components/SearchBar'\r\nimport StatusInfo from './components/StatusInfo'\r\nimport { getHeaderData, getHourData, getDayData, dataToFahrenheit, dataToCelcius } from './js/utils'\r\n\r\nconst App = () => {\r\n\r\n    const [locations, setLocations] = useState([])\r\n    const [tempUnit, setTempUnit] = useState('C')\r\n    const [forecast, setForecast] = useState([])\r\n    const [searchStatus, setSearchStatus] = useState('')\r\n    const [lastUpdated, setLastUpdated] = useState('')\r\n\r\n    useEffect(() => {\r\n        const locationList = JSON.parse(localStorage.getItem('weather-app-location-list'))\r\n        if (locationList) {\r\n            loadLocations(locationList);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (forecast.length > 0 && tempUnit === 'F') {\r\n            const newForecast = dataToFahrenheit(forecast)\r\n            setForecast(newForecast)\r\n        }\r\n        else if (forecast.length > 0 && tempUnit === 'C') {\r\n            const newForecast = dataToCelcius(forecast)\r\n            setForecast(newForecast)\r\n        }\r\n    }, [tempUnit])\r\n\r\n    const loadLocations = async (locationList) => {\r\n        if (locationList.length > 0) {\r\n            const units = getTempUnits()\r\n            let newForecast = []\r\n            let data = {}\r\n            try {\r\n                for (const location of locationList) {\r\n                    // const response = await fetch('testData.json')\r\n                    const response = await fetch(`/api?q=${location}&units=${units}`)\r\n                    data = await response.json()\r\n                    \r\n                    const headerData = getHeaderData(data)\r\n                    const hourData = getHourData(data)\r\n                    const dayData = getDayData(hourData)\r\n                    let apiData = {\r\n                        locationName: location,\r\n                        tempUnit: tempUnit,\r\n                        headerData: headerData,\r\n                        hourData: hourData,\r\n                        dayData: dayData\r\n                    }\r\n                    newForecast.push(apiData)\r\n                }\r\n                // console.log('newForecast', newForecast)\r\n                setForecast(newForecast)\r\n                setLocations(locationList)\r\n                setLastUpdated(`Last updated at ${getCurrentTime()}`)\r\n            }\r\n            catch {\r\n                setSearchStatus(`Error: ${data.cod}, ${data.message}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getTempUnits = () => {\r\n        if (tempUnit === 'C') {\r\n            return 'metric'\r\n        }\r\n        return 'imperial'\r\n    }\r\n\r\n    const getWeather = async (location) => {\r\n        const units = getTempUnits()\r\n        let data = {}\r\n        const newLocations = [location, ...locations]\r\n        try {\r\n            // const response = await fetch('testData.json')\r\n            const response = await fetch(`/api?q=${location}&units=${units}`)\r\n            data = await response.json()\r\n\r\n            const headerData = getHeaderData(data)\r\n            const hourData = getHourData(data)\r\n            const dayData = getDayData(hourData)\r\n            let newForecast = {\r\n                locationName: location,\r\n                tempUnit: tempUnit,\r\n                headerData: headerData,\r\n                hourData: hourData,\r\n                dayData: dayData\r\n            }\r\n            // console.log('newForecast', newForecast)\r\n            setForecast([newForecast, ...forecast])\r\n            setLocations(newLocations)\r\n            saveToLocalStorage(newLocations)\r\n            setSearchStatus('')\r\n            setLastUpdated(`Last updated at ${getCurrentTime()}`)\r\n        }\r\n        catch {\r\n            setSearchStatus(`Error: ${data.cod}, ${data.message}`)\r\n        }\r\n    }\r\n\r\n    const saveToLocalStorage = (items) => {\r\n        localStorage.setItem('weather-app-location-list', JSON.stringify(items));\r\n    }\r\n\r\n    const removeLocation = (name) => {\r\n        const newLocations = locations.filter((location) => (location !== name))\r\n        const newForecast = forecast.filter((forecast) => (forecast.locationName !== name))\r\n        setLocations(newLocations)\r\n        setForecast(newForecast)\r\n        saveToLocalStorage(newLocations)\r\n        setSearchStatus('')\r\n        if (newForecast.length === 0) {\r\n            setLastUpdated('')\r\n        }\r\n    }\r\n\r\n    const getCurrentTime = () => {\r\n        const date = new Date().toISOString()\r\n        return date.split('T')[1].slice(0, 5)\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex-center fd-column\">\r\n            <SearchBar\r\n                locations={locations}\r\n                getWeather={getWeather}\r\n                searchStatus={searchStatus}\r\n                setSearchStatus={setSearchStatus}\r\n            />\r\n            <div className=\"container d-flex-center fd-column\">\r\n                {\r\n                    forecast.map((obj, index) => {\r\n                        return (\r\n                            <Location\r\n                                key={index}\r\n                                location={obj.locationName}\r\n                                data={obj}\r\n                                tempUnit={tempUnit}\r\n                                setTempUnit={setTempUnit}\r\n                                removeLocation={removeLocation}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <StatusInfo text={lastUpdated} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}